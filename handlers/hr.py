from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from vacancies import VACANCIES
from keyboards import hr_vacancy_keyboard, hr_candidate_actions, invite_keyboard
from services.resume_fetcher import search_and_fetch
from services.hr_classifier_service import classify_bulk, classify_one
from storage import USER_STATES, InterviewState, save_state
from states import InterviewFSM
from typing import Any, List, Dict, Optional
from dataclasses import field
from bs4 import BeautifulSoup
from keyboards import InlineKeyboardBuilder
import os
from aiogram.types import FSInputFile
from services.file_resume_parser import FileResumeParser

router = Router()

@router.message(Command("start_hr"))
async def start_hr(m: Message, state: FSMContext):
    kb = InlineKeyboardBuilder()
    kb.button(text="üîé –ü–æ–¥–æ–±—Ä–∞—Ç—å –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤", callback_data="hr_search")
    kb.button(text=" –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ä–µ–∑—é–º–µ", callback_data="hr_upload_menu")
    kb.button(text="üìã –ú–æ–∏ —Ä–µ–∑—é–º–µ", callback_data="hr_my_resumes")
    kb.adjust(1)
    
    await m.answer(
        " <b>HR-–º–æ–¥—É–ª—å</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:\n"
        "‚Ä¢ üîé –ü–æ–¥–æ–±—Ä–∞—Ç—å –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ ‚Äî –ø–æ–∏—Å–∫ –Ω–∞ hh.ru\n"
        "‚Ä¢  –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ä–µ–∑—é–º–µ ‚Äî –∞–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–æ–≤ RTF/DOCX\n"
        "‚Ä¢ üìã –ú–æ–∏ —Ä–µ–∑—é–º–µ ‚Äî –ø—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ä–µ–∑—é–º–µ",
        parse_mode="HTML",
        reply_markup=kb.as_markup()
    )

@router.callback_query(F.data == "hr_search")
async def on_hr_search(c: CallbackQuery, state: FSMContext):
    await c.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–∫–∞–Ω—Å–∏—é –¥–ª—è –ø–æ–¥–±–æ—Ä–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤:",
        reply_markup=hr_vacancy_keyboard().as_markup()
    )
    await state.set_state(InterviewFSM.hr_choose_vacancy)

@router.callback_query(F.data == "hr_upload_menu")
async def on_hr_upload_menu(c: CallbackQuery, state: FSMContext):
    kb = InlineKeyboardBuilder()
    for v in VACANCIES.values():
        kb.button(text=v.title, callback_data=f"hr_upload:{v.key}")
    kb.adjust(1)
    
    await c.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–∫–∞–Ω—Å–∏—é –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ä–µ–∑—é–º–µ:",
        reply_markup=kb.as_markup()
    )

@router.callback_query(F.data == "hr_my_resumes")
async def on_hr_my_resumes(c: CallbackQuery):
    s = USER_STATES.get(c.from_user.id)
    if not s or not hasattr(s, 'file_resumes') or not s.file_resumes:
        await c.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ä–µ–∑—é–º–µ", show_alert=True)
        return
    
    await c.message.edit_text("üìã <b>–í–∞—à–∏ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ä–µ–∑—é–º–µ:</b>", parse_mode="HTML")
    
    for safe_file_id, resume_data in s.file_resumes.items():
        cv_data = resume_data["cv_data"]
        analysis = resume_data["analysis"]
        mp = analysis.get('match_percent', 0)
        
        status_emoji = "üü¢" if mp >= 75 else "üü°" if mp >= 50 else "üî¥"
        
        kb = InlineKeyboardBuilder()
        kb.button(text="üìã –û—Ç—á—ë—Ç", callback_data=f"report_file_{safe_file_id}")
        kb.button(text=" –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_file_{safe_file_id}")
        kb.adjust(2)
        
        await c.message.answer(
            f"{status_emoji} <b>{cv_data['title']}</b> ‚Äî {mp}%\n"
            f" {resume_data['file_name']}",
            parse_mode="HTML",
            reply_markup=kb.as_markup()
        )

@router.callback_query(F.data.startswith("hr_vac:"))
async def on_hr_choose(c: CallbackQuery, state: FSMContext):
    vac_key = c.data.split(":",1)[1]
    if vac_key not in VACANCIES:
        await c.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –≤–∞–∫–∞–Ω—Å–∏—è", show_alert=True)
        return
    s = USER_STATES.get(c.from_user.id) or InterviewState()
    s.vacancy_key = vac_key
    USER_STATES[c.from_user.id] = s
    save_state(c.from_user.id)
    vac = VACANCIES[vac_key]
    await c.message.edit_text(
        f"–í–∞–∫–∞–Ω—Å–∏—è: <b>{vac.title}</b>\n{vac.description}\n\n–ù–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã –ø–æ–¥–æ–±—Ä–∞—Ç—å –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤.",
        parse_mode="HTML",
        reply_markup=hr_candidate_actions(vac_key).as_markup()
    )
    await state.set_state(InterviewFSM.hr_fetching)

INVITE_THRESHOLD = 75  # –º–æ–∂–Ω–æ –≤—ã–Ω–µ—Å—Ç–∏ –≤ config

@router.callback_query(F.data.startswith("hr_fetch:"))
async def on_hr_fetch(c: CallbackQuery, state):
    vac_key = c.data.split(":",1)[1]

    # 1) –°–†–ê–ó–£ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º callback, –¥–æ –ª—é–±—ã—Ö –¥–æ–ª–≥–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
    try:
        await c.answer()
    except Exception:
        pass

    try:
        await c.answer()
    except Exception:
        pass
    vac = VACANCIES[vac_key]
    await c.message.edit_text(f"–ò—â—É –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –ø–æ–¥: <b>{vac.title}</b> ‚Ä¶ –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ 1‚Äì2 –º–∏–Ω—É—Ç.", parse_mode="HTML")

    cvs = await search_and_fetch(vac.title)
    results = await classify_bulk(vac, cvs)

    s = USER_STATES.get(c.from_user.id) or InterviewState()
    s.hr_candidates = []  # –ø–µ—Ä–µ–∑–∞–ø–∏—à–µ–º
    suitable, unsuitable = [], []

    for cv, res in zip(cvs, results):
        entry = {
            "url": cv.get("url",""),
            "title": cv.get("title","") or "–ö–∞–Ω–¥–∏–¥–∞—Ç",
            "experience": (cv.get("experience","") or "")[:280],
            "skills": cv.get("skills",""),
            "match_percent": int(res.get("match_percent", 0) or 0),
            "decision": (res.get("decision", "hold") or "").lower(),
            "fit": bool(res.get("fit", False)),
            "rationale": res.get("rationale","") or "",
        }
        s.hr_candidates.append(entry)
        ok = entry["fit"] or entry["decision"] == "go" or entry["match_percent"] >= INVITE_THRESHOLD
        (suitable if ok else unsuitable).append(entry)

    USER_STATES[c.from_user.id] = s
    save_state(c.from_user.id)

    # –ó–∞–≥–æ–ª–æ–≤–æ–∫
    await c.message.answer("<b>–ü–æ–¥–±–æ—Ä –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –∑–∞–≤–µ—Ä—à—ë–Ω</b>", parse_mode="HTML")

    # –ü–æ–¥—Ö–æ–¥—è—Ç ‚Äî –∫–∞—Ä—Ç–æ—á–∫–∞–º–∏
    if suitable:
        await c.message.answer("<b>–ü–æ–¥—Ö–æ–¥—è—Ç:</b>", parse_mode="HTML")
        for i, entry in enumerate(s.hr_candidates):
            if entry not in suitable:
                continue
            kb = InlineKeyboardBuilder()
            kb.button(text="üîó –û—Ç–∫—Ä—ã—Ç—å —Ä–µ–∑—é–º–µ", url=entry["url"])
            kb.button(text="üì® –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å", callback_data=f"invite:{i}")
            kb.adjust(2)
            lines = [
                f"<b>{entry['title']}</b> ‚Äî {entry['match_percent']}%",
                f"<a href=\"{entry['url']}\">–†–µ–∑—é–º–µ</a>",
            ]
            if entry["skills"]:
                lines.append(f"–ù–∞–≤—ã–∫–∏: {entry['skills'][:200]}")
            if entry["experience"]:
                lines.append(f"–û–ø—ã—Ç: {entry['experience']}")
            await c.message.answer("\n".join(lines), parse_mode="HTML", reply_markup=kb.as_markup())

    # –ù–µ –ø–æ–¥—Ö–æ–¥—è—Ç ‚Äî —Å–ø–∏—Å–∫–æ–º —Å –ø—Ä–∏—á–∏–Ω–∞–º–∏ –∏ —Å—Å—ã–ª–∫–æ–π
    if unsuitable:
        lines = ["<b>–ù–µ –ø–æ–¥—Ö–æ–¥—è—Ç:</b>"]
        for entry in unsuitable:
            why = entry['rationale']
            why = (why[:140] + "‚Ä¶") if why and len(why) > 140 else (why or "–Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º")
            lines.append(f"- <a href=\"{entry['url']}\">{entry['title']}</a> ‚Äî {why}")
        await c.message.answer("\n".join(lines), parse_mode="HTML")

    # await c.answer()

@router.callback_query(F.data.startswith("invite:"))
async def on_invite(c: CallbackQuery):
    # –°–†–ê–ó–£ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º
    try:
        await c.answer()
    except Exception:
        pass

    try:
        idx = int(c.data.split(":",1)[1])
    except Exception:
        await c.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –∫–Ω–æ–ø–∫–∞", show_alert=True)
        return
    s = USER_STATES.get(c.from_user.id)
    if not s or idx < 0 or idx >= len(s.hr_candidates):
        await c.answer("–ö–∞–Ω–¥–∏–¥–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    cand = s.hr_candidates[idx]
    await c.message.answer(f"–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–∞–Ω–¥–∏–¥–∞—Ç—É: <a href=\"{cand['url']}\">{cand['title']}</a>", parse_mode="HTML")
    # await c.answer()

@router.callback_query(F.data.startswith("hr_upload:"))
async def on_hr_upload(c: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–∑—é–º–µ"""
    vac_key = c.data.split(":",1)[1]
    if vac_key not in VACANCIES:
        await c.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –≤–∞–∫–∞–Ω—Å–∏—è", show_alert=True)
        return
    
    s = USER_STATES.get(c.from_user.id) or InterviewState()
    s.vacancy_key = vac_key
    USER_STATES[c.from_user.id] = s
    save_state(c.from_user.id)
    
    vac = VACANCIES[vac_key]
    await c.message.edit_text(
        f"–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª —Ä–µ–∑—é–º–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ RTF –∏–ª–∏ DOCX –¥–ª—è –≤–∞–∫–∞–Ω—Å–∏–∏: <b>{vac.title}</b>\n\n"
        f"–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:\n"
        f"‚Ä¢ RTF (.rtf)\n"
        f"‚Ä¢ DOCX (.docx)\n\n"
        f"–§–∞–π–ª –±—É–¥–µ—Ç –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∏ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω —Å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º–∏ –≤–∞–∫–∞–Ω—Å–∏–∏.",
        parse_mode="HTML"
    )
    await state.set_state(InterviewFSM.hr_fetching)

@router.message(InterviewFSM.hr_fetching, F.document)
async def on_file_upload(m: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ —Ä–µ–∑—é–º–µ"""
    s = USER_STATES.get(m.from_user.id)
    if not s or not s.vacancy_key:
        await m.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞–∫–∞–Ω—Å–∏—é –∫–æ–º–∞–Ω–¥–æ–π /start_hr")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞
    file_ext = os.path.splitext(m.document.file_name)[1].lower()
    if file_ext not in ['.rtf', '.docx']:
        await m.answer("–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ñ–∞–π–ª—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ RTF –∏–ª–∏ DOCX")
        return
    
    await m.answer("üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ñ–∞–π–ª —Ä–µ–∑—é–º–µ...")
    
    try:
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
        file_path = f"downloads/{m.document.file_id}_{m.document.file_name}"
        os.makedirs("downloads", exist_ok=True)
        
        print(f"–°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞: {m.document.file_name}")
        await m.bot.download(m.document, file_path)
        print(f"–§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {file_path}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
        if not os.path.exists(file_path):
            await m.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞")
            return
        
        file_size = os.path.getsize(file_path)
        print(f"–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {file_size} –±–∞–π—Ç")
        
        if file_size == 0:
            await m.answer("‚ùå –§–∞–π–ª –ø—É—Å—Ç–æ–π –∏–ª–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω")
            return
        
        # –ü–∞—Ä—Å–∏–º —Ñ–∞–π–ª
        cv_data = FileResumeParser.parse_file(file_path)
        
        if not cv_data:
            await m.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–∞–π–ª. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç –∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ.")
            return
        
        print(f"–î–∞–Ω–Ω—ã–µ —Ä–µ–∑—é–º–µ –∏–∑–≤–ª–µ—á–µ–Ω—ã: {cv_data['title']}")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—é–º–µ
        vac = VACANCIES[s.vacancy_key]
        res = await classify_one(vac, cv_data)
        
        mp = int(res.get("match_percent", 0) or 0)
        dec = (res.get("decision", "hold") or "").lower()
        rat = res.get("rationale", "")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        status_emoji = "üü¢" if mp >= 75 or dec == "go" else "üü°" if mp >= 50 else "üî¥"
        status_text = "–ü–æ–¥—Ö–æ–¥–∏—Ç" if mp >= 75 or dec == "go" else "–†–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å" if mp >= 50 else "–ù–µ –ø–æ–¥—Ö–æ–¥–∏—Ç"
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        response_lines = [
            f"{status_emoji} <b>–ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—é–º–µ: {cv_data['title']}</b>",
            f" –°–æ–≤–ø–∞–¥–µ–Ω–∏–µ: <b>{mp}%</b>",
            f" –°—Ç–∞—Ç—É—Å: <b>{status_text}</b>",
            f"üéØ –†–µ—à–µ–Ω–∏–µ: <b>{dec.upper()}</b>",
        ]
        
        if rat:
            response_lines.append(f"üí° –û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ: {rat}")
        
        if cv_data['skills']:
            response_lines.append(f" –ù–∞–≤—ã–∫–∏: {cv_data['skills']}")
        
        if cv_data['experience']:
            response_lines.append(f"üíº –û–ø—ã—Ç: {cv_data['experience'][:200]}...")
        
        # –°–æ–∑–¥–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–π ID –¥–ª—è —Ñ–∞–π–ª–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã –∏ –±—É–∫–≤—ã)
        safe_file_id = m.document.file_id.replace('-', '').replace('_', '')[:16]
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π
        kb = InlineKeyboardBuilder()
        if mp >= 75 or dec == "go":
            kb.button(text="‚úÖ –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –Ω–∞ –∏–Ω—Ç–µ—Ä–≤—å—é", callback_data=f"invite_file_{safe_file_id}")
        elif mp >= 50:
            kb.button(text="ü§î –†–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å –¥–µ—Ç–∞–ª—å–Ω–æ", callback_data=f"review_file_{safe_file_id}")
        
        kb.button(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_file_{safe_file_id}")
        kb.button(text="üìã –ü–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á—ë—Ç", callback_data=f"report_file_{safe_file_id}")
        kb.adjust(1)
        
        await m.answer("\n".join(response_lines), parse_mode="HTML", reply_markup=kb.as_markup())
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        if not hasattr(s, 'file_resumes'):
            s.file_resumes = {}
        
        s.file_resumes[safe_file_id] = {
            "cv_data": cv_data,
            "analysis": res,
            "file_name": m.document.file_name,
            "file_path": file_path,
            "upload_time": m.date.isoformat(),
            "original_file_id": m.document.file_id
        }
        
        USER_STATES[m.from_user.id] = s
        save_state(m.from_user.id)
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {e}")
        import traceback
        traceback.print_exc()
        await m.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {str(e)}")
    finally:
        # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        if 'file_path' in locals() and os.path.exists(file_path):
            try:
                os.remove(file_path)
                print(f"–í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω: {file_path}")
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: {e}")

@router.callback_query(F.data.startswith("invite_file_"))
async def on_invite_file(c: CallbackQuery):
    """–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –∏–∑ —Ñ–∞–π–ª–∞"""
    try:
        await c.answer()
    except Exception:
        pass
    
    safe_file_id = c.data.split("invite_file_", 1)[1]
    s = USER_STATES.get(c.from_user.id)
    
    if not s or not hasattr(s, 'file_resumes') or safe_file_id not in s.file_resumes:
        await c.answer("–î–∞–Ω–Ω—ã–µ –æ —Ä–µ–∑—é–º–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", show_alert=True)
        return
    
    resume_data = s.file_resumes[safe_file_id]
    cv_data = resume_data["cv_data"]
    
    await c.message.answer(
        f"‚úÖ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–∞–Ω–¥–∏–¥–∞—Ç—É: <b>{cv_data['title']}</b>\n"
        f"–§–∞–π–ª: {resume_data['file_name']}",
        parse_mode="HTML"
    )

@router.callback_query(F.data.startswith("reject_file_"))
async def on_reject_file(c: CallbackQuery):
    """–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –∏–∑ —Ñ–∞–π–ª–∞"""
    try:
        await c.answer()
    except Exception:
        pass
    
    safe_file_id = c.data.split("reject_file_", 1)[1]
    s = USER_STATES.get(c.from_user.id)
    
    if not s or not hasattr(s, 'file_resumes') or safe_file_id not in s.file_resumes:
        await c.answer("–î–∞–Ω–Ω—ã–µ –æ —Ä–µ–∑—é–º–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", show_alert=True)
        return
    
    resume_data = s.file_resumes[safe_file_id]
    cv_data = resume_data["cv_data"]
    
    await c.message.answer(
        f"‚ùå –ö–∞–Ω–¥–∏–¥–∞—Ç –æ—Ç–∫–ª–æ–Ω—ë–Ω: <b>{cv_data['title']}</b>\n"
        f"–§–∞–π–ª: {resume_data['file_name']}",
        parse_mode="HTML"
    )

@router.callback_query(F.data.startswith("review_file_"))
async def on_review_file(c: CallbackQuery):
    """–î–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –∫–∞–Ω–¥–∏–¥–∞—Ç–∞"""
    try:
        await c.answer()
    except Exception:
        pass
    
    safe_file_id = c.data.split("review_file_", 1)[1]
    s = USER_STATES.get(c.from_user.id)
    
    if not s or not hasattr(s, 'file_resumes') or safe_file_id not in s.file_resumes:
        await c.answer("–î–∞–Ω–Ω—ã–µ –æ —Ä–µ–∑—é–º–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", show_alert=True)
        return
    
    resume_data = s.file_resumes[safe_file_id]
    cv_data = resume_data["cv_data"]
    analysis = resume_data["analysis"]
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è
    kb = InlineKeyboardBuilder()
    kb.button(text="‚úÖ –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å", callback_data=f"invite_file_{safe_file_id}")
    kb.button(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_file_{safe_file_id}")
    kb.button(text="üìã –ü–æ–ª–Ω—ã–π –æ—Ç—á—ë—Ç", callback_data=f"report_file_{safe_file_id}")
    kb.adjust(2, 1)
    
    review_text = [
        f"üîç <b>–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞</b>",
        f" {cv_data['title']}",
        f"üìä –°–æ–≤–ø–∞–¥–µ–Ω–∏–µ: {analysis.get('match_percent', 0)}%",
        f"",
        f"<b>–°–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã:</b>",
    ]
    
    if analysis.get('strengths'):
        for strength in analysis['strengths']:
            review_text.append(f"‚úÖ {strength}")
    else:
        review_text.append("–ù–µ —É–∫–∞–∑–∞–Ω—ã")
    
    review_text.append(f"\n<b>–ü—Ä–æ–±–µ–ª—ã:</b>")
    if analysis.get('gaps'):
        for gap in analysis['gaps']:
            review_text.append(f"‚ö†Ô∏è {gap}")
    else:
        review_text.append("–ù–µ –≤—ã—è–≤–ª–µ–Ω—ã")
    
    await c.message.edit_text("\n".join(review_text), parse_mode="HTML", reply_markup=kb.as_markup())

@router.callback_query(F.data.startswith("report_file_"))
async def on_report_file(c: CallbackQuery):
    """–ü–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á—ë—Ç –ø–æ —Ñ–∞–π–ª—É"""
    try:
        await c.answer()
    except Exception:
        pass
    
    safe_file_id = c.data.split("report_file_", 1)[1]
    s = USER_STATES.get(c.from_user.id)
    
    if not s or not hasattr(s, 'file_resumes') or safe_file_id not in s.file_resumes:
        await c.answer("–î–∞–Ω–Ω—ã–µ –æ —Ä–µ–∑—é–º–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", show_alert=True)
        return
    
    resume_data = s.file_resumes[safe_file_id]
    cv_data = resume_data["cv_data"]
    analysis = resume_data["analysis"]
    
    report_lines = [
        f"<b>–ü–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á—ë—Ç –ø–æ —Ä–µ–∑—é–º–µ</b>",
        f"–ö–∞–Ω–¥–∏–¥–∞—Ç: {cv_data['title']}",
        f"–§–∞–π–ª: {resume_data['file_name']}",
        f"",
        f"<b>–ê–Ω–∞–ª–∏–∑:</b>",
        f"–°–æ–≤–ø–∞–¥–µ–Ω–∏–µ: {analysis.get('match_percent', 0)}%",
        f"–†–µ—à–µ–Ω–∏–µ: {analysis.get('decision', 'hold').upper()}",
        f"–ü–æ–¥—Ö–æ–¥–∏—Ç: {'–î–∞' if analysis.get('fit', False) else '–ù–µ—Ç'}",
    ]
    
    if analysis.get('rationale'):
        report_lines.append(f"–û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ: {analysis['rationale']}")
    
    if analysis.get('strengths'):
        strengths = ', '.join(analysis['strengths'])
        report_lines.append(f"–°–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã: {strengths}")
    
    if analysis.get('gaps'):
        gaps = ', '.join(analysis['gaps'])
        report_lines.append(f"–ü—Ä–æ–±–µ–ª—ã: {gaps}")
    
    report_lines.extend([
        f"",
        f"<b>–î–∞–Ω–Ω—ã–µ —Ä–µ–∑—é–º–µ:</b>",
        f"–ù–∞–≤—ã–∫–∏: {cv_data.get('skills', '–ù–µ —É–∫–∞–∑–∞–Ω—ã')}",
        f"–û–ø—ã—Ç: {cv_data.get('experience', '–ù–µ —É–∫–∞–∑–∞–Ω')[:300]}...",
    ])
    
    await c.message.answer("\n".join(report_lines), parse_mode="HTML")

@router.callback_query(F.data.startswith("delete_file_"))
async def on_delete_file(c: CallbackQuery):
    """–£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ —Ä–µ–∑—é–º–µ"""
    try:
        await c.answer()
    except Exception:
        pass
    
    safe_file_id = c.data.split("delete_file_", 1)[1]
    s = USER_STATES.get(c.from_user.id)
    
    if not s or not hasattr(s, 'file_resumes') or safe_file_id not in s.file_resumes:
        await c.answer("–†–µ–∑—é–º–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
        return
    
    resume_data = s.file_resumes[safe_file_id]
    cv_data = resume_data["cv_data"]
    
    # –£–¥–∞–ª—è–µ–º –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    del s.file_resumes[safe_file_id]
    USER_STATES[c.from_user.id] = s
    save_state(c.from_user.id)
    
    # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if os.path.exists(resume_data['file_path']):
        try:
            os.remove(resume_data['file_path'])
        except:
            pass
    
    await c.message.edit_text(f" –†–µ–∑—é–º–µ <b>{cv_data['title']}</b> —É–¥–∞–ª–µ–Ω–æ", parse_mode="HTML")