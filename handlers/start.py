from aiogram import Router, F
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery
from keyboards import vacancy_keyboard
from states import InterviewFSM
from storage import USER_STATES, InterviewState, save_state


router = Router()


@router.message(CommandStart())
async def on_start(m: Message, state: FSMContext):
    USER_STATES[m.from_user.id] = InterviewState()
    save_state()
    text = (
    "–ü—Ä–∏–≤–µ—Ç! –Ø –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–π. –ú–æ–∂–µ–º –æ–±—â–∞—Ç—å—Å—è –≥–æ–ª–æ—Å–æ–º –∏–ª–∏ —Ç–µ–∫—Å—Ç–æ–º.\n\n"
    "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–∫–∞–Ω—Å–∏—é, –ø–æ –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–π—Ç–∏ –∫–æ—Ä–æ—Ç–∫–æ–µ –∏–Ω—Ç–µ—Ä–≤—å—é:"
    )
    await m.answer(text, reply_markup=vacancy_keyboard().as_markup())
    await state.set_state(InterviewFSM.choosing_vacancy)


# from aiogram import Router
# from aiogram.filters import CommandStart
# from aiogram.types import Message
# from keyboards import vacancy_keyboard

# router = Router()

# @router.message(CommandStart())
# async def on_start(m: Message):
#     text = (
#         "–ü—Ä–∏–≤–µ—Ç! –Ø –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–π üëã\n\n"
#         "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–∫–∞–Ω—Å–∏—é, –ø–æ –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–π—Ç–∏ –∏–Ω—Ç–µ—Ä–≤—å—é:"
#     )
#     await m.answer(text, reply_markup=vacancy_keyboard().as_markup())